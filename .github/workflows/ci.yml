name: Insider Test Automation CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      browser:
        description: 'Browser to run tests on'
        required: true
        default: 'chrome'
        type: choice
        options:
          - chrome
          - firefox
          - edge
      environment:
        description: 'Test environment'
        required: true
        default: 'ci'
        type: choice
        options:
          - local
          - ci
          - docker

jobs:
  # Lint and Static Analysis
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Compile code
        run: mvn clean compile test-compile

      - name: Run static analysis
        run: mvn checkstyle:check pmd:check spotbugs:check
        continue-on-error: true

  # Unit Tests (if any)
  unit-tests:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run unit tests
        run: mvn test -Dtest=**/*UnitTest

  # Integration Tests with Selenium Grid
  integration-tests:
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        browser: [chrome, firefox]
    
    services:
      selenium-hub:
        image: selenium/hub:4.15.0-20231110
        ports:
          - 4444:4444
        options: --health-cmd="curl -f http://localhost:4444/wd/hub/status" --health-interval=10s --health-timeout=5s --health-retries=3

      chrome-node:
        image: selenium/node-chrome:4.15.0-20231110
        env:
          HUB_HOST: selenium-hub
          HUB_PORT: 4444
        options: --shm-size=2g

      firefox-node:
        image: selenium/node-firefox:4.15.0-20231110
        env:
          HUB_HOST: selenium-hub
          HUB_PORT: 4444
        options: --shm-size=2g

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Wait for Selenium Grid
        run: |
          timeout 60 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:4444/wd/hub/status)" != "200" ]]; do sleep 2; done'

      - name: Run integration tests
        run: |
          mvn test \
            -Dbrowser=${{ matrix.browser }} \
            -Denvironment=ci \
            -Dheadless=true \
            -Dselenium.hub.url=http://localhost:4444/wd/hub \
            -Dtest=InsiderCareerFlowTest
        env:
          SELENIUM_HUB_URL: http://localhost:4444/wd/hub

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.browser }}
          path: |
            target/surefire-reports/
            target/allure-results/
            target/logs/

  # Docker-based E2E Tests
  e2e-tests-docker:
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and run tests with Docker Compose
        run: |
          docker-compose up --build --abort-on-container-exit
        env:
          BROWSER: chrome
          HEADLESS: true
          ENVIRONMENT: docker

      - name: Copy test results from container
        run: |
          docker cp automation-tests:/app/target ./target-docker
        if: always()

      - name: Upload Docker test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: docker-test-results
          path: |
            target-docker/
            allure-results/

  # Generate and Deploy Allure Report
  allure-report:
    runs-on: ubuntu-latest
    needs: [integration-tests, e2e-tests-docker]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test artifacts
        uses: actions/download-artifact@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install Allure
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
          tar -zxf allure-2.24.0.tgz
          sudo mv allure-2.24.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure

      - name: Combine Allure results
        run: |
          mkdir -p combined-allure-results
          find . -path "*/allure-results/*" -name "*.json" -exec cp {} combined-allure-results/ \;

      - name: Generate Allure report
        run: |
          allure generate combined-allure-results --clean -o allure-report

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [integration-tests, e2e-tests-docker, allure-report]
    if: always()
    
    steps:
      - name: Notify on success
        if: ${{ needs.integration-tests.result == 'success' && needs.e2e-tests-docker.result == 'success' }}
        run: |
          echo "‚úÖ All tests passed successfully!"
          echo "üîó Test Report: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"

      - name: Notify on failure
        if: ${{ needs.integration-tests.result == 'failure' || needs.e2e-tests-docker.result == 'failure' }}
        run: |
          echo "‚ùå Some tests failed!"
          echo "üìã Check the test results in the artifacts section." 